name: Weekly Ethereum Newsletter

on:
  schedule:
  # Triggers at 15:00 UTC every Friday (8:00 AM PDT)
    - cron: '0 15 * * 5'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_context:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Python and requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Build Prompt Context (last 7 days)
        run: python scripts/build_prompt_context.py
        
      - name: Print context
        run: cat scripts/prompt_context.md

      - name: Upload context file for other jobs
        uses: actions/upload-artifact@v4
        with:
          name: context-data
          path: scripts/prompt_context.md

  generate_part_1:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    needs: build_context
    uses: ./.github/workflows/run-single-section.yml
    with:
      part_number: 1
    secrets: inherit # This correctly passes your LLM_API_KEY

  generate_part_2:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    needs: generate_part_1 
    uses: ./.github/workflows/run-single-section.yml
    with:
      part_number: 2
    secrets: inherit

  generate_part_3:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    needs: generate_part_2
    uses: ./.github/workflows/run-single-section.yml
    with:
      part_number: 3
      context_needed: true
    secrets: inherit

  combine_and_send:
    # This 'if' condition is still important
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    needs: generate_part_3
    runs-on: ubuntu-latest
    steps:
      # This job no longer needs to check out its own code.
      # It only needs the artifacts.
          
      - name: Download all partial newsletter files
        uses: actions/download-artifact@v4
        with:
          path: final_parts

      # This is the step with the key changes ðŸ‘‡
      - name: Combine and Stage Newsletter
        id: combine
        run: |
          # The file is created here, but NOT in a git repository yet.
          # It's just sitting in a temporary folder.
          mkdir -p final_newsletter_output

          TIMESTAMP_FILE=$(date -u +"%Y%m%d")
          TIMESTAMP_PRETTY=$(date -u +"%B %d, %Y")
          SUBJECT="Week in Ethereum News - $TIMESTAMP_PRETTY"

          # Define the final path where the file will eventually go in the website repo
          FINAL_PATH_IN_REPO="content/blog/${TIMESTAMP_FILE}.md"
          
          # Combine the parts into a single file in the temp folder
          TEMP_FILE="final_newsletter_output/${TIMESTAMP_FILE}.md"
          echo "## Week in Ethereum News" > "$TEMP_FILE"
          echo "### $TIMESTAMP_PRETTY" >> "$TEMP_FILE"
          echo "" >> "$TEMP_FILE"
          
          for part_file in $(find final_parts/ -name "part_*_output.md" | sort); do
            cat "$part_file" >> "$TEMP_FILE"
            echo -e "\n\n" >> "$TEMP_FILE"
          done
          
          echo "--- Final Newsletter created temporarily ---"
          cat "$TEMP_FILE"
          
          # Set outputs for the next steps
          echo "subject=$SUBJECT" >> "$GITHUB_OUTPUT"
          echo "final_path=$FINAL_PATH_IN_REPO" >> "$GITHUB_OUTPUT"
      
      - name: Send to Buttondown as a Draft ðŸ“¬
        env:
          BUTTONDOWN_API_KEY: ${{ secrets.BUTTONDOWN_API_KEY }}
        run: |
          BODY_CONTENT=$(jq -Rs . "${{ steps.combine.outputs.final_path }}")
          curl --request POST \
            --url https://api.buttondown.email/v1/emails \
            --header "Authorization: Token $BUTTONDOWN_API_KEY" \
            --header 'Content-Type: application/json' \
            --data '{
              "subject": "${{ steps.combine.outputs.subject }}",
              "body": '"$BODY_CONTENT"'
            }'
          
      - name: Check out website repository
        uses: actions/checkout@v4
        with:
          repository: 'ercref/new-wie-site' 
          # Use the PAT to get write access
          token: ${{ secrets.GH_PAT }}
          # Path to clone into. We'll call it 'website'
          path: 'website'

      - name: Move newsletter to website repo
        run: |
          # Create the blog directory inside the checked-out website repo
          mkdir -p website/content/blog
          # Move the file
          mv final_newsletter_output/*.md website/${{ steps.combine.outputs.final_path }}
          
            
      - name: Commit and Push to Website Repo ðŸš€
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # Tell the action to work inside the 'website' directory
          repository: ./website
          commit_message: "docs: Publish newsletter for ${{ steps.combine.outputs.subject }} [skip ci]"
          commit_user_name: GitHub Actions Bot
          commit_user_email: actions@github.com
          
      - name: Upload Final Newsletter as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-newsletter-${{ github.run_id }}
          path: ${{ github.workspace }}/final_newsletter.md
